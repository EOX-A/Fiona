from _typeshed import Incomplete
from fiona.collection import Collection as Collection
from fiona.errors import DriverError as DriverError
from fiona.meta import supports_vsi as supports_vsi
from fiona.ogrext import MemoryFileBase as MemoryFileBase

log: Incomplete

class MemoryFile(MemoryFileBase):
    def __init__(self, file_or_bytes: Incomplete | None = ..., filename: Incomplete | None = ..., ext: str = ...) -> None: ...
    def open(self, mode: Incomplete | None = ..., driver: Incomplete | None = ..., schema: Incomplete | None = ..., crs: Incomplete | None = ..., encoding: Incomplete | None = ..., layer: Incomplete | None = ..., vfs: Incomplete | None = ..., enabled_drivers: Incomplete | None = ..., crs_wkt: Incomplete | None = ..., allow_unsupported_drivers: bool = ..., **kwargs): ...
    def listdir(self, path: Incomplete | None = ...): ...
    def listlayers(self, path: Incomplete | None = ...): ...
    def __enter__(self): ...
    def __exit__(self, *args, **kwargs) -> None: ...

class ZipMemoryFile(MemoryFile):
    name: Incomplete
    def __init__(self, file_or_bytes: Incomplete | None = ..., filename: Incomplete | None = ..., ext: str = ...) -> None: ...
    def open(self, path: Incomplete | None = ..., driver: Incomplete | None = ..., encoding: Incomplete | None = ..., layer: Incomplete | None = ..., enabled_drivers: Incomplete | None = ..., allow_unsupported_drivers: bool = ..., **kwargs): ...
