import threading
from _typeshed import Incomplete
from fiona._env import GDALDataFinder as GDALDataFinder, GDALEnv as GDALEnv, PROJDataFinder as PROJDataFinder, calc_gdal_version_num as calc_gdal_version_num, get_gdal_config as get_gdal_config, get_gdal_release_name as get_gdal_release_name, get_gdal_version_num as get_gdal_version_num, set_gdal_config as set_gdal_config, set_proj_data_search_path as set_proj_data_search_path
from fiona.errors import EnvError as EnvError, FionaDeprecationWarning as FionaDeprecationWarning, GDALVersionError as GDALVersionError
from fiona.session import DummySession as DummySession, Session as Session

class ThreadEnv(threading.local):
    def __init__(self) -> None: ...

local: Incomplete
log: Incomplete

class Env:
    @classmethod
    def default_options(cls): ...
    session: Incomplete
    options: Incomplete
    context_options: Incomplete
    def __init__(self, session: Incomplete | None = ..., aws_unsigned: bool = ..., profile_name: Incomplete | None = ..., session_class=..., **options) -> None: ...
    @classmethod
    def from_defaults(cls, *args, **kwargs): ...
    def credentialize(self) -> None: ...
    def drivers(self): ...
    def __enter__(self): ...
    def __exit__(self, exc_type: Incomplete | None = ..., exc_val: Incomplete | None = ..., exc_tb: Incomplete | None = ...) -> None: ...

def defenv(**options) -> None: ...
def getenv(): ...
def hasenv(): ...
def setenv(**options) -> None: ...
def hascreds(): ...
def delenv() -> None: ...

class NullContextManager:
    def __init__(self) -> None: ...
    def __enter__(self): ...
    def __exit__(self, *args) -> None: ...

def env_ctx_if_needed(): ...
def ensure_env(f): ...
def ensure_env_with_credentials(f): ...

class GDALVersion:
    major: Incomplete
    minor: Incomplete
    def __eq__(self, other): ...
    def __lt__(self, other): ...
    @classmethod
    def parse(cls, input): ...
    @classmethod
    def runtime(cls): ...
    def at_least(self, other): ...
    def __init__(self, major, minor) -> None: ...
    def __lt__(self, other): ...
    def __le__(self, other): ...
    def __gt__(self, other): ...
    def __ge__(self, other): ...

def require_gdal_version(version, param: Incomplete | None = ..., values: Incomplete | None = ..., is_max_version: bool = ..., reason: str = ...): ...

path: Incomplete
