"""
This type stub file was generated by pyright.
"""

from fiona.ogrext import MemoryFileBase

"""Classes capable of reading and writing collections
"""
log = ...
class MemoryFile(MemoryFileBase):
    """A BytesIO-like object, backed by an in-memory file.

    This allows formatted files to be read and written without I/O.

    A MemoryFile created with initial bytes becomes immutable. A
    MemoryFile created without initial bytes may be written to using
    either file-like or dataset interfaces.

    Parameters
    ----------
    file_or_bytes : an open Python file, bytes, or None
        If not None, the MemoryFile becomes immutable and read-only.
        If None, it is write-only.
    filename : str
        An optional filename. The default is a UUID-based name.
    ext : str
        An optional file extension. Some format drivers require a
        specific value.

    """
    def __init__(self, file_or_bytes=..., filename=..., ext=...) -> None:
        ...
    
    def open(self, mode=..., driver=..., schema=..., crs=..., encoding=..., layer=..., vfs=..., enabled_drivers=..., crs_wkt=..., allow_unsupported_drivers=..., **kwargs): # -> Collection:
        """Open the file and return a Fiona collection object.

        If data has already been written, the file is opened in 'r'
        mode. Otherwise, the file is opened in 'w' mode.

        Parameters
        ----------
        Note well that there is no `path` parameter: a `MemoryFile`
        contains a single dataset and there is no need to specify a
        path.

        Other parameters are optional and have the same semantics as the
        parameters of `fiona.open()`.
        """
        ...
    
    def listdir(self, path=...):
        """List files in a directory.

        Parameters
        ----------
        path : URI (str or pathlib.Path)
            A dataset resource identifier.

        Returns
        -------
        list
            A list of filename strings.

        """
        ...
    
    def listlayers(self, path=...):
        """List layer names in their index order

        Parameters
        ----------
        path : URI (str or pathlib.Path)
            A dataset resource identifier.

        Returns
        -------
        list
            A list of layer name strings.

        """
        ...
    
    def __enter__(self): # -> Self@MemoryFile:
        ...
    
    def __exit__(self, *args, **kwargs): # -> None:
        ...
    


class ZipMemoryFile(MemoryFile):
    """A read-only BytesIO-like object backed by an in-memory zip file.

    This allows a zip file containing formatted files to be read
    without I/O.

    Parameters
    ----------
    file_or_bytes : an open Python file, bytes, or None
        If not None, the MemoryFile becomes immutable and read-only. If
        None, it is write-only.
    filename : str
        An optional filename. The default is a UUID-based name.
    ext : str
        An optional file extension. Some format drivers require a
        specific value. The default is ".zip".
    """
    def __init__(self, file_or_bytes=..., filename=..., ext=...) -> None:
        ...
    
    def open(self, path=..., driver=..., encoding=..., layer=..., enabled_drivers=..., allow_unsupported_drivers=..., **kwargs): # -> Collection:
        """Open a dataset within the zipped stream.

        Parameters
        ----------
        path : str
            Path to a dataset in the zip file, relative to the root of the
            archive.

        Returns
        -------
        A Fiona collection object

        """
        ...
    


