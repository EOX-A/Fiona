"""
This type stub file was generated by pyright.
"""

from collections.abc import MutableMapping
from enum import Enum
from json import JSONEncoder

"""Fiona data model"""
class OGRGeometryType(Enum):
    Unknown = ...
    Point = ...
    LineString = ...
    Polygon = ...
    MultiPoint = ...
    MultiLineString = ...
    MultiPolygon = ...
    GeometryCollection = ...
    CircularString = ...
    CompoundCurve = ...
    CurvePolygon = ...
    MultiCurve = ...
    MultiSurface = ...
    Curve = ...
    Surface = ...
    PolyhedralSurface = ...
    TIN = ...
    Triangle = ...
    NONE = ...
    LinearRing = ...
    CircularStringZ = ...
    CompoundCurveZ = ...
    CurvePolygonZ = ...
    MultiCurveZ = ...
    MultiSurfaceZ = ...
    CurveZ = ...
    SurfaceZ = ...
    PolyhedralSurfaceZ = ...
    TINZ = ...
    TriangleZ = ...
    PointM = ...
    LineStringM = ...
    PolygonM = ...
    MultiPointM = ...
    MultiLineStringM = ...
    MultiPolygonM = ...
    GeometryCollectionM = ...
    CircularStringM = ...
    CompoundCurveM = ...
    CurvePolygonM = ...
    MultiCurveM = ...
    MultiSurfaceM = ...
    CurveM = ...
    SurfaceM = ...
    PolyhedralSurfaceM = ...
    TINM = ...
    TriangleM = ...
    PointZM = ...
    LineStringZM = ...
    PolygonZM = ...
    MultiPointZM = ...
    MultiLineStringZM = ...
    MultiPolygonZM = ...
    GeometryCollectionZM = ...
    CircularStringZM = ...
    CompoundCurveZM = ...
    CurvePolygonZM = ...
    MultiCurveZM = ...
    MultiSurfaceZM = ...
    CurveZM = ...
    SurfaceZM = ...
    PolyhedralSurfaceZM = ...
    TINZM = ...
    TriangleZM = ...
    Point25D = ...
    LineString25D = ...
    Polygon25D = ...
    MultiPoint25D = ...
    MultiLineString25D = ...
    MultiPolygon25D = ...
    GeometryCollection25D = ...


GEOMETRY_TYPES = ...
class Object(MutableMapping):
    """Base class for CRS, geometry, and feature objects

    In Fiona 2.0, the implementation of those objects will change.  They
    will no longer be dicts or derive from dict, and will lose some
    features like mutability and default JSON serialization.

    Object will be used for these objects in Fiona 1.9. This class warns
    about future deprecation of features.
    """
    _delegated_properties = ...
    def __init__(self, **kwds) -> None:
        ...
    
    def __getitem__(self, item): # -> Any:
        ...
    
    def __iter__(self): # -> chain[Unknown]:
        ...
    
    def __len__(self): # -> int:
        ...
    
    def __setitem__(self, key, value): # -> None:
        ...
    
    def __delitem__(self, key): # -> None:
        ...
    
    def __eq__(self, other) -> bool:
        ...
    


class _Geometry:
    def __init__(self, coordinates=..., type=..., geometries=...) -> None:
        ...
    


class Geometry(Object):
    """A GeoJSON-like geometry

    Notes
    -----
    Delegates coordinates and type properties to an instance of
    _Geometry, which will become an extension class in Fiona 2.0.

    """
    _delegated_properties = ...
    def __init__(self, coordinates=..., type=..., geometries=..., **data) -> None:
        ...
    
    @classmethod
    def from_dict(cls, ob=..., **kwargs): # -> Geometry:
        ...
    
    @property
    def coordinates(self): # -> None:
        """The geometry's coordinates

        Returns
        -------
        Sequence

        """
        ...
    
    @property
    def type(self): # -> None:
        """The geometry's type

        Returns
        -------
        str

        """
        ...
    
    @property
    def geometries(self): # -> None:
        """A collection's geometries.

        Returns
        -------
        list

        """
        ...
    
    @property
    def __geo_interface__(self): # -> dict[Unknown, Unknown] | Any:
        ...
    


class _Feature:
    def __init__(self, geometry=..., id=..., properties=...) -> None:
        ...
    


class Feature(Object):
    """A GeoJSON-like feature

    Notes
    -----
    Delegates geometry and properties to an instance of _Feature, which
    will become an extension class in Fiona 2.0.

    """
    _delegated_properties = ...
    def __init__(self, geometry=..., id=..., properties=..., **data) -> None:
        ...
    
    @classmethod
    def from_dict(cls, ob=..., **kwargs): # -> Feature:
        ...
    
    def __eq__(self, other) -> bool:
        ...
    
    @property
    def geometry(self): # -> None:
        """The feature's geometry object

        Returns
        -------
        Geometry

        """
        ...
    
    @property
    def id(self): # -> None:
        """The feature's id

        Returns
        ------
        object

        """
        ...
    
    @property
    def properties(self): # -> None:
        """The feature's properties

        Returns
        -------
        object

        """
        ...
    
    @property
    def type(self): # -> Literal['Feature']:
        """The Feature's type

        Returns
        -------
        str

        """
        ...
    
    @property
    def __geo_interface__(self): # -> dict[Unknown, Unknown] | Any:
        ...
    


class Properties(Object):
    """A GeoJSON-like feature's properties"""
    def __init__(self, **kwds) -> None:
        ...
    
    @classmethod
    def from_dict(cls, mapping=..., **kwargs): # -> Properties:
        ...
    


class ObjectEncoder(JSONEncoder):
    """Encodes Geometry and Feature"""
    def default(self, o): # -> dict[Unknown, Unknown] | Any:
        ...
    


def decode_object(obj): # -> Object | Feature | Geometry:
    """A json.loads object_hook

    Parameters
    ----------
    obj : dict
        A decoded dict.

    Returns
    -------
    Feature, Geometry, or dict

    """
    ...

def to_dict(val): # -> dict[Unknown, Unknown] | Any:
    """Converts an object to a dict"""
    ...

