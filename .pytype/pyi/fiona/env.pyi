# (generated with --quick)

import _typeshed
import attr
import fiona.errors
import fiona.session
import inspect
import logging
import os
import re
import threading
import warnings
from typing import Any, Callable, Dict, Optional, Sequence, Tuple, Type, TypeVar, Union, overload

DummySession: Type[fiona.session.DummySession]
EnvError: Type[fiona.errors.EnvError]
FionaDeprecationWarning: Type[fiona.errors.FionaDeprecationWarning]
GDALDataFinder: Any
GDALEnv: Any
GDALVersionError: Type[fiona.errors.GDALVersionError]
PROJDataFinder: Any
Session: Type[fiona.session.Session]
calc_gdal_version_num: Any
get_gdal_config: Any
get_gdal_release_name: Any
get_gdal_version_num: Any
local: ThreadEnv
log: logging.Logger
path: Any
set_gdal_config: Any
set_proj_data_search_path: Any

_T = TypeVar('_T')
_T0 = TypeVar('_T0')
_TEnv = TypeVar('_TEnv', bound=Env)
_TNullContextManager = TypeVar('_TNullContextManager', bound=NullContextManager)

class Env:
    __doc__: str
    _has_parent_env: bool
    context_options: Any
    options: dict
    session: Any
    def __enter__(self: _TEnv) -> _TEnv: ...
    @overload
    def __exit__(self, exc_type: Type[BaseException] = ..., exc_val: BaseException = ..., exc_tb = ...) -> None: ...
    @overload
    def __exit__(self, exc_type: None = ..., exc_val: BaseException = ..., exc_tb = ...) -> None: ...
    @overload
    def __exit__(self, exc_type: Type[BaseException] = ..., exc_val: None = ..., exc_tb = ...) -> None: ...
    @overload
    def __exit__(self, exc_type: None = ..., exc_val: None = ..., exc_tb = ...) -> None: ...
    @overload
    def __exit__(self, exc_type: Type[BaseException] = ..., exc_val: BaseException = ..., exc_tb: None = ...) -> None: ...
    @overload
    def __exit__(self, exc_type: None = ..., exc_val: BaseException = ..., exc_tb: None = ...) -> None: ...
    @overload
    def __exit__(self, exc_type: Type[BaseException] = ..., exc_val: None = ..., exc_tb: None = ...) -> None: ...
    @overload
    def __exit__(self, exc_type: None = ..., exc_val: None = ..., exc_tb: None = ...) -> None: ...
    def __init__(self, session = ..., aws_unsigned = ..., profile_name = ..., session_class = ..., **options) -> None: ...
    def _dump_open_datasets(self) -> Any: ...
    def credentialize(self) -> None: ...
    @classmethod
    def default_options(cls) -> Dict[str, bool]: ...
    def drivers(self) -> Any: ...
    @classmethod
    def from_defaults(cls: Type[_TEnv], *args, **kwargs) -> _TEnv: ...

@attr.s
class GDALVersion:
    major: int
    minor: int
    __attrs_attrs__: Tuple[attr.Attribute[int], ...]
    __doc__: str
    def __eq__(self, other) -> bool: ...
    def __init__(self, major: int = ..., minor: int = ...) -> None: ...
    def __lt__(self, other) -> bool: ...
    def __repr__(self) -> str: ...
    def __str__(self) -> str: ...
    def at_least(self, other) -> bool: ...
    @classmethod
    def parse(cls, input: _T0) -> Union[GDALVersion, _T0]: ...
    @classmethod
    def runtime(cls) -> Any: ...

class NullContextManager:
    def __enter__(self: _TNullContextManager) -> _TNullContextManager: ...
    def __exit__(self, *args) -> None: ...
    def __init__(self) -> None: ...

class ThreadEnv(threading.local):
    _discovered_options: Optional[Dict[nothing, nothing]]
    _env: Any
    def __init__(self) -> None: ...

def defenv(**options) -> None: ...
def delenv() -> None: ...
def ensure_env(f) -> Callable: ...
def ensure_env_with_credentials(f) -> Callable: ...
def env_ctx_if_needed() -> Union[Env, NullContextManager]: ...
def getenv() -> Any: ...
def getfullargspec(func: object) -> inspect.FullArgSpec: ...
def hascreds() -> bool: ...
def hasenv() -> bool: ...
def require_gdal_version(version, param = ..., values = ..., is_max_version = ..., reason = ...) -> Callable[[Any], Any]: ...
def setenv(**options) -> None: ...
def total_ordering(cls: Type[_T]) -> Type[_T]: ...
def wraps(wrapped: Callable[..., object], assigned: Sequence[str] = ..., updated: Sequence[str] = ...) -> _typeshed.IdentityFunction: ...
